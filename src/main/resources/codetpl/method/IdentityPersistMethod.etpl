<%
var entity, columns, tableName, fieldTypes;
var jdbcMethod;
%>    
    @Override
    public ${entity.simpleName} persist(${entity.simpleName} entity) throws SQLException, Exception {
        PreparedStatement pstmt = null;
        boolean initAuto = false;
        StatementSession session = LOCAL_STATEMENT_SESSION.get();
        try {
            if (session.getAutoCommit()) {
                initAuto = true;
                session.setAutoCommit(false);
            }
            int row = 0;
            String sql = "insert into ${tableName} ("
                    + "<%
                    var idInfo;
                    var i = 0;
                    for(column : columns){%>
                    <%
                    var info = fieldTypes[column];
                    if (!info.isId) {
                    %>
                    <%if (i%4==0 && i > 0) {%>" 
                    + "<%}%>${column}<%if (for.iter.index!=columns.size-1) {%>,<%}%><% i++;}} %>"
                    + ") values (" 
                    + "<%
                    i = 0;
                    for(column : columns){
                        var info = fieldTypes[column];
                        if (info.isId) {
                            idInfo = info;
                        } else {
                    %>
                    <%if (i>0) {%>,<%}%>?<% i++;}} %>"
                    + ")";
            if (logger.isTraceEnabled()) {
                logger.trace("insert sql = {{}}", sql);
            }
            pstmt = session.prepareStatement(sql, 
                    PreparedStatement.RETURN_GENERATED_KEYS);
            <%
            i = 1;
            for (column : columns) {
                var info = fieldTypes[column];
                var jdbcMethod = info.setMethod;
                if (!info.isId) {
                    if ("TIMESTAMP" == info.temporal) {
            %>
            Timestamp ts${for.iter.index+1} = null;
            if (entity.get${info.method}() != null) {
                ts${for.iter.index+1} = new Timestamp(entity.get${info.method}().getTime());
            }
            pstmt.set${jdbcMethod.setMethod}(${i}, ts${for.iter.index+1});
            <%
                    } else if ("DATE" == info.temporal) {
            %>
            java.sql.Date ts${for.iter.index+1} = null;
            if (entity.get${info.method}() != null) {
                ts${for.iter.index+1} = new java.sql.Date(entity.get${info.method}().getTime());
            }
            pstmt.set${jdbcMethod.setMethod}(${i}, ts${for.iter.index+1});
            <%
                    } else if ("TIME" == info.temporal) {
            %>
            java.sql.Time ts${for.iter.index+1} = null;
            if (entity.get${info.method}() != null) {
                ts${for.iter.index+1} = new java.sql.Time(entity.get${info.method}.getTime());
            }
            pstmt.set${jdbcMethod.setMethod}(${i}, ts${for.iter.index+1});
            <%
                    } else {
            %>
            pstmt.set${jdbcMethod.setMethod}(${i}, entity.get${info.method}());
            <%
                    }
                    i++;
                }
            }
            %>
            row = pstmt.executeUpdate();
            if (row > 0) {
                ResultSet prs = pstmt.getGeneratedKeys();
                <%
                var idType = idInfo.type;
                %>
                ${idType.simpleName} nid = null;
                if (prs.next()) {
                    nid = prs.get${jdbcMethod.getMethod}(1);
                }
                entity.setId(nid);
            }
            if (initAuto) {
                session.commit();
            }
            if (session.enableStat()) {
                session.addInsert(1);
            }
        } catch (SQLException ex) {
            logger.error("{}", ex.getMessage());
            throw ex;
        } finally {
            if (!session.enableBatch()) {
                session.closeStatements();
            }
            if (initAuto) {
                session.setAutoCommit(true);
            }
        }
        return entity;
    }